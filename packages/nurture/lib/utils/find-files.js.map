{"version":3,"sources":["../../src/utils/find-files.js"],"names":[],"mappings":";;;;;;;gCAcA,WACI,QADJ,EAEI,OAFJ,EAGI,SAAwB,EAH5B,EAI0B;AAAA;AAAA,oCAGxB,WAAoB,GAApB,EAAyB;AACvB,YAAI;AACF,gBAAM,QAAQ,MAAM,GAAG,IAAH,CAAQ,GAAR,CAApB;AACA,cAAI,MAAM,MAAN,MAAkB,eAAK,QAAL,CAAc,GAAd,MAAuB,QAA7C,EAAuD;AACrD,kBAAM,IAAN,CAAW,GAAX;AACD,WAFD,MAEO,IAAI,MAAM,WAAN,EAAJ,EAAyB;AAC9B,kBAAM,QAAQ,EAAC,MAAM,WAAW,GAAX,CAAP,CAAd;AACA,gBAAI,KAAJ,EAAW;AACT,oBAAM,OAAO,MAAM,GAAG,OAAH,CAAW,GAAX,CAAnB;AACA,oBAAM,QAAQ,GAAR,CAAY,KAAK,GAAL;AAAA,8CAAS,WAAM,KAAN;AAAA,yBAAe,MAAM,KAAK,eAAK,IAAL,CAAU,GAAV,EAAe,KAAf,CAAL,CAArB;AAAA,iBAAT;;AAAA;AAAA;AAAA;AAAA,mBAAZ,CAAN;AACD;AACF;AACF,SAXD,CAWE,OAAO,CAAP,EAAU;AACV;AACD;AACF,OAlBuB;;AAAA,sBAGT,IAHS;AAAA;AAAA;AAAA;;AACxB,UAAM,QAAQ,EAAd;AACA,UAAM,aAAa,UAAU,OAAV,EAAmB,MAAnB,CAAnB;;AAiBA,UAAM,KAAK,OAAL,CAAN;AACA,WAAO,KAAP;AACD,G;;kBAzBc,S;;;;;AAdf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,MAAM,KAAK,iCAAX;;AAEA,MAAM,YAAY,CAAC,OAAD,EAAU,QAAV,KAAuB;AACvC,QAAM,KAAK,IAAI,MAAJ,CAAY,KAAG,kCAAS,OAAT,CAAkB,GAAjC,CAAX;AACA;AAAA,iCAAO,WAAM,IAAN;AAAA,aACL,CAAC,MAAM,QAAP,EAAiB,IAAjB,CAAsB;AAAA,eAAW,yBAAU,KAAK,OAAL,CAAa,EAAb,EAAiB,EAAjB,CAAV,EAAgC,OAAhC,CAAX;AAAA,OAAtB,CADK;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAED,CAJD;;kBAiCe,S","file":"find-files.js","sourcesContent":["import pify from 'pify';\nimport nativeFs from 'fs';\nimport path from 'path';\nimport minimatch from 'minimatch';\nimport reEscape from 'escape-string-regexp';\n\nconst fs = pify(nativeFs);\n\nconst isIgnored = (workdir, patterns) => {\n  const re = new RegExp(`^${reEscape(workdir)}`);\n  return async file =>\n    (await patterns).some(pattern => minimatch(file.replace(re, ''), pattern));\n};\n\nasync function findFiles(\n    filename: string,\n    workdir: string,\n    ignore: Array<String> = []\n): Promise<Array<string>> {\n  const files = [];\n  const shouldSkip = isIgnored(workdir, ignore);\n  async function walk(dir) {\n    try {\n      const stats = await fs.stat(dir);\n      if (stats.isFile() && path.basename(dir) === filename) {\n        files.push(dir);\n      } else if (stats.isDirectory()) {\n        const visit = !await shouldSkip(dir);\n        if (visit) {\n          const dirs = await fs.readdir(dir);\n          await Promise.all(dirs.map(async child => await walk(path.join(dir, child))));\n        }\n      }\n    } catch (e) {\n      return;\n    }\n  }\n  await walk(workdir);\n  return files;\n}\n\nexport default findFiles;\n"]}
{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AAJA;;;AAMA,MAAM,kBAAkB,CAAC,WAAD,EAAc,OAAd,EAAuB,MAAvB,KAAkC,SAAS;AACjE,cAAY,OAAZ,CAAoB,CAAC,EAAE,EAAF,EAAM,MAAM,SAAZ,EAAD,KAA6B;AAC/C,QAAI,CAAC,UAAU,KAAV,CAAL,EAAuB;AACrB;AACD;AACD,UAAM,eAAe,UAAU,KAAV,CAArB;AACA,iBAAa,OAAb,CAAqB,QAAQ,GAAR,CAAY,EAAZ,EAAgB,OAAO,KAAP,CAAhB,CAArB;AACD,GAND;AAOD,CARD;;AAUA,MAAM;AAAA,+BAAe,WAAO,KAAP,EAAuC;AAC1D,QAAI,MAAJ;AACA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAS,CAAC,KAAD,CAAT;AACD,KAFD,MAEO;AACL,eAAS,KAAT;AACD;AACD,UAAM,CAAC,WAAD,EAAc,QAAd,EAAwB,MAAxB,IAAkC,MAAM,QAAQ,GAAR,CAAY,CACxD,4BADwD,EAExD,4BAFwD,EAGxD,uBAHwD,CAAZ,CAA9C;AAKA,UAAM,UAAU,qBAAc,QAAd,EAAwB,MAAxB,CAAhB;AACA,UAAM,QAAQ,gBAAgB,WAAhB,EAA6B,OAA7B,EAAsC,MAAtC,CAAd;;AAEA,WAAO,OAAP,CAAe,KAAf;;AAEA,YAAQ,KAAR;AACD,GAlBK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAoBO,MAAM;AAAA,gCAAc,aAAY;AACrC,UAAM,cAAc,MAAM,4BAA1B;AACA,UAAM,UAAU,EAAhB;AACA,gBAAY,OAAZ,CAAoB,eAAO;AACzB,aAAO,IAAP,CAAY,IAAI,IAAhB,EAAsB,OAAtB,CAA8B,kBAAU;AACtC,gBAAQ,MAAR,IAAmB,QAAQ,MAAR,KAAmB,EAAtC;AACA,gBAAQ,MAAR,EAAgB,IAAhB,CAAqB,EAAE,IAAI,IAAI,EAAV,EAAc,MAAM,IAAI,IAAJ,CAAS,MAAT,CAApB,EAArB;AACD,OAHD;AAID,KALD;AAMA,WAAO,OAAP;AACD,GAVY;;AAAA;AAAA;AAAA;AAAA,IAAN;;kBAYQ,Y","file":"index.js","sourcesContent":["// @flow\n/* eslint-disable no-console */\nimport createWatcher from './watch';\nimport loadWatches from './load-watches';\nimport hasWatchman from './utils/has-watchman';\nimport getConfig from './config';\n\nconst setupPhaseWatch = (definitions, watcher, config) => phase => {\n  definitions.forEach(({ wd, data: phaseData }) => {\n    if (!phaseData[phase]) {\n      return;\n    }\n    const phaseWatches = phaseData[phase];\n    phaseWatches.forEach(watcher.add(wd, config[phase]));\n  });\n};\n\nconst setupWatches = async (phase: string|Array<string>) => {\n  let phases;\n  if (typeof phase === 'string') {\n    phases = [phase];\n  } else {\n    phases = phase;\n  }\n  const [definitions, watchman, config] = await Promise.all([\n    loadWatches(),\n    hasWatchman(),\n    getConfig(),\n  ]);\n  const watcher = createWatcher(watchman, config);\n  const setup = setupPhaseWatch(definitions, watcher, config);\n\n  phases.forEach(setup);\n\n  watcher.start();\n};\n\nexport const listTargets = async () => {\n  const definitions = await loadWatches();\n  const targets = {};\n  definitions.forEach(def => {\n    Object.keys(def.data).forEach(target => {\n      targets[target] = (targets[target] || []);\n      targets[target].push({ wd: def.wd, data: def.data[target] });\n    });\n  });\n  return targets;\n};\n\nexport default setupWatches;\n"]}